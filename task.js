//show todays date
import Task from "./taskclass.js"
import Taskmanager from "./taskmanager.js"
const formTask=document.getElementById("formTask");
const name=document.getElementById("name");
const details=document.getElementById("details");
const assignee=document.getElementById("assignee");
const dueDate=document.getElementById("dueDate");
const status=document.getElementById("status");
const tableBody=document.querySelector("#example");
const submit=document.getElementById("submit");
const formModal=document.getElementById("formModal");
const modalName=document.getElementById("modalName");
const contIdEdit=document.getElementById("contIdEdit");
const errormsg=document.getElementById("errormsg");
const errorMsg1 = document.querySelector("#errorMsg1");
const errorMsg2 = document.querySelector("#errorMsg2");
const errorMsg3 = document.querySelector("#errorMsg3");
const todo=document.querySelector("#todo");
const progress=document.querySelector("#progress");
const review=document.querySelector("#review");
const done=document.querySelector("#done");
const allDisplay=document.querySelector("#alldisplay");
const dateElement = document.getElementById("date");
const options = {weekday : "long", month:"short", day:"numeric"};
const today = new Date();
dateElement.innerHTML = today.toLocaleDateString("en-US", options);
//declaration for form, three inpue fields,table display,submit button for store this item and hidden field for id - check for the class and id in the HTML

//console.log used for value verfication

// //contIdEdit is the hidden value generated by random function while  editing inspect the edit button and store this item button (gets changed when you edit to edit this button) - it will show the id value in the value attribute in chrome console

const newTask=new Taskmanager();
newTask.showTasks();

submit.addEventListener("click",(e)=>{
    e.preventDefault();
    //update id checking if new id display it in the new row
    if(!contIdEdit.value){
        console.log("new Task");
         let id=Math.floor(Math.random()*1000000);
        newTask.showData(id,name.value,details.value,assignee.value,dueDate.value,status.value);
        newTask.storeTask();
        newTask.clearFields();
        clearError();
    // }
    }
    //else call the update function and append the item in the html and local storage
    else{
        const id=contIdEdit.value;
        console.log(id);
        newTask.showData(id,name.value,details.value,assignee.value,dueDate.value,status.value);
        console.log(newTask);
        newTask.updateTask(id);
        submit.innerHTML="Save";
        tableBody.innerHTML="";
        newTask.showTasks();
        newTask.clearFields();
    }
});

name.addEventListener("input", function(event) {
    if (event.target.value && event.target.value.length <= 8) {
      errorMsg1.innerHTML = "Mandatory must enter 8 characters of length";
      errorMsg1.style.color = "red";
      name.focus();
    } else {
        errorMsg1.innerHTML = "Looks Good!";
        errorMsg1.style.color = "purple";
    }
  });
  details.addEventListener("input", function(event) {
    if (event.target.value && event.target.value.length <= 15) {
      errorMsg2.innerHTML = "Mandatory must enter 15 characters of length";
      errorMsg2.style.color = "red";
      details.focus();
      
    } else {
        errorMsg2.innerHTML = "Looks Good!";
        errorMsg2.style.color = "purple";
    }
  });
  dueDate.addEventListener("change", function(event) {
    if (event.target.value == 0) {
      errorMsg3.innerHTML = "Please select a valid date."
      errorMsg3.style.color = "red";
      dueDate.focus();
    } else {
        errorMsg3.innerHTML = "Looks Good!";
        errorMsg3.style.color = "green";
    }
  });

  function clearError() {
    errorMsg1.innerHTML = "";
    errorMsg2.innerHTML = "";
    errorMsg3.innerHTML = "";
  }
//since delete and edit are dynamically generated so it is targeted with the class method 
tableBody.addEventListener("click",(e)=>{
    e.preventDefault();
    if(e.target.classList.contains("delete")){
        let id=e.target.getAttribute("data-id");
        newTask.deleteTask(id);
        e.target.parentElement.parentElement.parentElement.remove();
    console.log("delete");
    }

    else if(e.target.classList.contains("edit")){
        let id=e.target.getAttribute("data-id");
        console.log(id);
        let items=JSON.parse(localStorage.getItem("tasks"));
        console.log(items);
        let newItem=items.find(item=>item.id==id);
        console.log(newItem);
        modalName.innerHTML="Update task";
        $("#formTask").modal("show");
        console.log(newItem.id);
        console.log(newItem.name);
        name.value=newItem.name;
        details.value=newItem.details;
        assignee.value=newItem.assignee;
        dueDate.value=newItem.dueDate;
        status.value=newItem.status;
        contIdEdit.value=id;
        submit.innerHTML="Update";
    }
});

allDisplay.addEventListener("click",(e)=>{
    e.preventDefault();
    tableBody.innerHTML="";
    newTask.showTasks();
});
todo.addEventListener("click",(e)=>{
    e.preventDefault();
    newTask.displayFilter("To Do");
});
progress.addEventListener("click",(e)=>{
    e.preventDefault();
    newTask.displayFilter("In progress");
});
review.addEventListener("click",(e)=>{
    e.preventDefault();
    newTask.displayFilter("review");
});
done.addEventListener("click",(e)=>{
    e.preventDefault();
    newTask.displayFilter("Done");
});